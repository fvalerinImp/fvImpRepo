//
//  ToDoTasksListViewController.swift
//  EjemploCleanSwift
//
//  Created by Federico Valerin on 6/6/17.
//  Copyright (c) 2017 Federico Valerin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ToDoTasksListViewControllerInput{
    //func displaySomething(viewModel: ToDoTasksList.ViewModel)
    func displayTestInformation(viewModel: ToDoTasksList.TestInformation.ViewModel)
    func displayTareas(viewModel: ToDoTasksList.clsDataSource.ViewModel)
}

protocol ToDoTasksListViewControllerOutput{
    func requestTestInformation(request: ToDoTasksList.TestInformation.Request)
    func requestTareas(request: ToDoTasksList.clsDataSource.Request)
}

class ToDoTasksListViewController: UIViewController, ToDoTasksListViewControllerInput{
    var output: ToDoTasksListViewControllerOutput!
    var router: ToDoTasksListRouter!
    
    
    @IBOutlet weak var tableView: UITableView!
    
    func requestTestInformation(number: String){
        let request = ToDoTasksList.TestInformation.Request(numberText: number)
        output.requestTestInformation(request: request)
    }
    
    // MARK: Object lifecycle
    
    override func awakeFromNib(){
        super.awakeFromNib()
        ToDoTasksListConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        
        tableView.registerCustomCell(identifier: ToDoTasksListTableViewCell.getTableViewCellIdentifier())
        
        
        requestTestInformation(number: "7")
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad(){
        // NOTE: Ask the Interactor to do some work
        
//        let request = ToDoTasksList.Request()
//        output.doSomething(request: request)
    }
    
    // MARK: Display logic
    func displayTestInformation(viewModel: ToDoTasksList.TestInformation.ViewModel) {
        print("El resultado es : \(viewModel.numberText)")
    }
    
        // ESTO NO VA AQUI
    func responseDataSource(response:ToDoTasksList.clsDataSource.Response) {
        let viewModel = ToDoTasksList.clsDataSource.ViewModel(arrTareasViewModel: response.arrTareas.map{ToDoTasksList.TaskModelCell(text: $0.text, counter: "\($0.counter)")})
        output.displayDataSource(viewModel: viewModel)
    }
    
    
    func displayTareas(viewModel: ToDoTasksList.clsDataSource.ViewModel) {
        print("Tarea 1 : \(viewModel.arrTareasViewModel[0])" )
        print("Tarea 2 : \(viewModel.arrTareasViewModel[1])" )
        print("Tarea 3 : \(viewModel.arrTareasViewModel[2])" )
        
        
        
        
    }
    
    
//    func displaySomething(viewModel: ToDoTasksList.ViewModel){
//        // NOTE: Display the result from the Presenter
//        
//        // nameTextField.text = viewModel.name
//    }
}

extension ToDoTasksListViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "")
        return cell!
    }
    
}





