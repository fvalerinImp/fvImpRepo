//
//  AddToDoTaskViewController.swift
//  EjemploCleanSwift
//
//  Created by Federico Valerin on 6/6/17.
//  Copyright (c) 2017 Federico Valerin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol AddToDoTaskViewControllerInput{
    func displaySomething(viewModel: AddToDoTask.ViewModel)
}

protocol AddToDoTaskViewControllerOutput{
    func doSomething(request: AddToDoTask.Request)
}

class AddToDoTaskViewController: UIViewController, AddToDoTaskViewControllerInput{
    var output: AddToDoTaskViewControllerOutput!
    var router: AddToDoTaskRouter!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib(){
        super.awakeFromNib()
        AddToDoTaskConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        addSaveButton()
        self.title = "Add ToDo Task"
        
        doSomethingOnLoad()
    }
    
    func addSaveButton() {
        let saveAction = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(salvarObjetoAction))
        navigationItem.rightBarButtonItem = saveAction
        
    }
    
    func salvarObjetoAction() {
//        //      let news = News(titleNews: titleTextField.text!, descriptionNews: descriptionTextField.text!, createdAt: Date())
//        
//        //        delegate?.addNews(news: news)
//        
//        let sNumero = String( arc4random_uniform(15) + 1 )
//        
//        //   let objeto = clsDog(pName:  txtNombre.text!, pImageName: "perro" + sNumero, pColor: txtColor.text!, pOrden: 1)
//        
//        let objeto = clsDog()
//        objeto.name = txtNombre.text!
//        objeto.ImageName = "perro" + sNumero
//        objeto.color = txtColor.text!
//        
//        delegado?.agregarObjeto(pObjeto: objeto)
//        
    }
    
    
    
    // MARK: Event handling
    
    func doSomethingOnLoad(){
        // NOTE: Ask the Interactor to do some work
        
        let request = AddToDoTask.Request()
        output.doSomething(request: request)
    }
    
    // MARK: Display logic
    
    func displaySomething(viewModel: AddToDoTask.ViewModel){
        // NOTE: Display the result from the Presenter
        
        // nameTextField.text = viewModel.name
    }
}
